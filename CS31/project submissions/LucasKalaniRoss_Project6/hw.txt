Lucas Kalani Ross
David Smallberg
CS31 LEC 2
Nov 25, 2024

1.
a)

int main()
    {
        int arr[3] = { 5, 10, 15 };
        int* ptr = arr;

        *ptr = 30;          // set arr[0] to 30
        *(ptr + 1) = 20;      // set arr[1] to 20
        ptr += 2;
        ptr[0] = 10;        // set arr[2] to 10

	ptr -= 2;
        while (ptr <= arr + 2)
        {
            cout << *(ptr) << endl;    // print values
	    ptr++;
        }
    }

b)

The function passes a copy of the pointer, not a reference to the pointer, so the original pointer in main() is never changed.

void findMax(int arr[], int n, int* &pToMax)
    {
        if (n <= 0) 
            return;      // no items, no maximum!
    
        pToMax = arr;

        for (int i = 1; i < n; i++)
        {
            if (arr[i] > *pToMax)
                 pToMax = arr + i;
        }
    }       

    int main()
    {
        int nums[4] = { 5, 3, 15, 6 };
        int* ptr = &nums[0];

        findMax(nums, 4, ptr);
        cout << "The maximum is at address " << ptr << endl;
        cout << "It's at position " << ptr - nums << endl;
        cout << "Its value is " << *ptr << endl;
    }

c)

The pointer ptr was uninitialized, so it does not point to any memory address but rather holds a garbage value.

void computeCube(int n, int* ncubed)
    {
        *ncubed = n * n * n;
    }

int main()
    {
	int num = 5;
        int* ptr = &num;
        computeCube(num, ptr);
        cout << "Five cubed is " << *ptr << endl;
    }

d)

strequal() is falsely using references/memory addresses instead of values/characters in boolean statements.

 // return true if two C strings are equal
 bool strequal(const char str1[], const char str2[])
    {
        while (*str1 != 0  &&  *str2 != 0)  // zero bytes at ends
        {
            if (*str1 != *str2)  // compare corresponding characters
                return false;
            str1++;            // advance to the next character
            str2++;
        }
        return *str1 == *str2;   // both ended at same time?
    }

 int main()
    {
        char a[15] = "Alex H.";
        char b[15] = "Alex T.";

        if (strequal(a,b))
            cout << "They're the same person!\n";
    }

e)

The program is initializing the array as a temporary variable in getPtrToArray(), so once that function finishes execution the pointer that gets returned may point to a garbage value.

2.
a)

double* cat;

b)

double mouse[5];

c)

cat = &mouse[4];

d)

*cat = 25;

e)

*(mouse + 3) = 42;

f)

cat -= 3;

g)

cat[1] = 17;

h)

cat[0] = 54;

i)

bool d = cat == mouse;

j)

bool b = *cat == *(cat + 1);

3.
a)

double mean(const double* scores, int numScores)
    {
        const double* ptr = scores; //ptr not really necessary
    	double tot = 0;
        for (int i = 0; i < numScores; i++)
        {
            tot += *(ptr + i);
        }
        return tot/numScores;
    }

b)

// This function searches through str for the character chr.
// If the chr is found, it returns a pointer into str where
// the character was first found, otherwise nullptr (not found).

const char* findTheChar(const char* str, char chr)
    {
        for (int k = 0; *(str + k) != 0; k++)
            if (*(str + k) == chr)
                return str + k;

        return nullptr;
    }

c)

// This function searches through str for the character chr.
// If the chr is found, it returns a pointer into str where
// the character was first found, otherwise nullptr (not found).

const char* findTheChar(const char* str, char chr)
    {
	if (*str == 0) return nullptr;
        else if (*str == chr) return str;
	else return findTheChar(str + 1, chr);
    }

4.

3
4
79
-1
9
22
19

the program first prints an arithmetic expression, then prints the six contents of array sequentially.

3	ptr was moved forward 2 addresses from the beginning of the array. &array[5] is 5 addresses from the beginning of the array. 5 - 2 = 3.
4	the third element of array is initialized as 4. then its swapped with the first element when swap2() is called.
79	the value at second element in array is set to 79. swap1() does nothing to the contents of array.
-1	ptr is set to point to the beginning of the array. then the value that ptr points to is set to -1. swap1() does nothing. then the first and third elements are swapped when the swap2() function is called.
9	ptr was moved forward 2 addresses from the beginning of the array. then the second element from ptr is set to 9. relative to the array, the fourth element of array is set to 9.
22	the fifth element of array is initialized as 22 and never changes.
19	the sixth element of array is initialized as 19 and never changes.

5.

void removeS(char* c){
    char* temp;
    while (*c != 0){
        temp = c;
	if (*c == 'S' || *c == 's'){
	    while(*temp != 0){
	        *temp = *(temp + 1);
		temp++;
	    }
	    *temp = 0;
	} else c++;
    }
}
